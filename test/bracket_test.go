package test

import (
	"testing"
)

func Test_Bracket(t *testing.T) {

	tests := []testData{
		{
			query:         "$['key']",
			data:          `{"key": "value"}`,
			consensus:     "value",
			expected:      "value",
			expectedError: "",
		},
		{
			query:         "$['missing']",
			data:          `{"key": "value"}`,
			consensus:     nil,
			expected:      nil,
			expectedError: "key: invalid token key 'missing' not found",
		},
		{
			query: "$..[0]",
			data:  `[ "first", { "key": [ "first nested", { "more": [ { "nested": ["deepest", "second"] }, ["more", "values"] ] } ] } ]`,
			consensus: []interface{}{
				"deepest",
				"first nested",
				"first",
				"more",
				map[string]interface{}{
					"nested": []interface{}{
						"deepest",
						"second",
					},
				},
			},
			expected: []interface{}{
				"deepest",
				"first nested",
				"first",
				"more",
				map[string]interface{}{
					"nested": []interface{}{
						"deepest",
						"second",
					},
				},
			},
		},
		{
			query:         "$['ü']",
			data:          `{"ü": 42}`,
			expected:      nil,
			consensus:     nil,
			expectedError: "key: invalid token key 'ü' not found",
		},
		{
			query:         "$['two.some']",
			data:          `{ "one": {"key": "value"}, "two": {"some": "more", "key": "other value"}, "two.some": "42" }`,
			expected:      "42",
			consensus:     "42",
			expectedError: "",
		},
		{
			query:         `$["key"]`,
			data:          `{"key": "value"}`,
			expected:      nil,
			consensus:     "value",
			expectedError: "invalid JSONPath query '$[\"key\"]' invalid token. '[\"key\"]' does not match any token format",
		},
		{
			query:         "$[]",
			data:          `{"": 42, "''": 123, "\"\"": 222}`,
			expected:      nil,
			consensus:     nil,
			expectedError: "invalid JSONPath query '$[]' invalid token. '[]' does not match any token format",
		},
		{
			query:         "$['']",
			data:          `{"": 42, "''": 123, "\"\"": 222}`,
			expected:      float64(42),
			consensus:     float64(42),
			expectedError: "",
		},
		{
			query:         `$[""]`,
			data:          `{"": 42, "''": 123, "\"\"": 222}`,
			expected:      nil,
			consensus:     float64(42),
			expectedError: "invalid JSONPath query '$[\"\"]' invalid token. '[\"\"]' does not match any token format",
		},
		{
			query:         "$[-2]",
			data:          `["one element"]`,
			expected:      nil,
			consensus:     nil,
			expectedError: "index: invalid token out of range",
		},
		{
			query:         "$[2]",
			data:          `["first", "second", "third", "forth", "fifth"]`,
			expected:      "third",
			consensus:     "third",
			expectedError: "",
		},
		{
			query:         "$[0]",
			data:          `{ "0": "value" }`,
			expected:      nil,
			consensus:     nil,
			expectedError: "index: invalid token target. expected [array slice] got [map]",
		},
		{
			query:         "$[1]",
			data:          `["one element"]`,
			expected:      nil,
			consensus:     nil,
			expectedError: "index: invalid token out of range",
		},
		{
			query:         "$[0]",
			data:          `Hello World`,
			expected:      nil,
			consensus:     nil,
			expectedError: "invalid data. unexpected type or nil",
		},
		{
			query:         "$.*[1]",
			data:          `[[1], [2,3]]`,
			expected:      []interface{}{float64(3)},
			consensus:     []interface{}{float64(3)},
			expectedError: "",
		},
		{
			query:         "$[-1]",
			data:          `["first", "second", "third"]`,
			expected:      "third",
			consensus:     "third",
			expectedError: "",
		},
		{
			query:         "$[-1]",
			data:          `[]`,
			expected:      nil,
			consensus:     nil,
			expectedError: "index: invalid token out of range",
		},
		{
			query:         "$[0]",
			data:          `["first", "second", "third", "forth", "fifth"]`,
			expected:      "first",
			consensus:     "first",
			expectedError: "",
		},
		{
			query:         "$[':']",
			data:          `{ ":": "value", "another": "entry" }`,
			expected:      "value",
			consensus:     "value",
			expectedError: "",
		},
		{
			query:         "$[']']",
			data:          `{"]": 42}`,
			expected:      float64(42),
			consensus:     float64(42),
			expectedError: "",
		},
		{
			query:         "$['@']",
			data:          `{ "@": "value", "another": "entry" }`,
			expected:      "value",
			consensus:     "value",
			expectedError: "",
		},
		{
			query:         "$['.']",
			data:          `{ ".": "value", "another": "entry" }`,
			expected:      "value",
			consensus:     "value",
			expectedError: "",
		},
		{
			query:         "$['.*']",
			data:          `{"key": 42, ".*": 1, "": 10}`,
			expected:      float64(1),
			consensus:     float64(1),
			expectedError: "",
		},
		{
			query:         `$['"']`,
			data:          `{ "\"": "value", "another": "entry" }`,
			expected:      "value",
			consensus:     "value",
			expectedError: "",
		},
		{
			query:         `$['\\']`,
			data:          `{"\\":"value"}`,
			expected:      "value",
			consensus:     consensusNone,
			expectedError: "",
		},
		{
			query:         `$['\'']`,
			data:          `{"'":"value"}`,
			expected:      "value",
			consensus:     "value",
			expectedError: "",
		},
		{
			query:         "$['0']",
			data:          `{ "0": "value" }`,
			expected:      "value",
			consensus:     "value",
			expectedError: "",
		},
		{
			query:         "$['$']",
			data:          `{ "$": "value", "another": "entry" }`,
			expected:      "value",
			consensus:     "value",
			expectedError: "",
		},
		{
			query:         `$[':@."$,*\'\\']`,
			data:          `{":@.\"$,*'\\": 42}`,
			expected:      float64(42),
			consensus:     consensusNone,
			expectedError: "",
		},
		{
			query:         `$['single'quote']`,
			data:          `{"single'quote":"value"}`,
			expected:      nil,
			consensus:     nil,
			expectedError: "invalid JSONPath query '$['single'quote']' invalid token. '['single'quote']' does not match any token format",
		},
		{
			query:         `$[',']`,
			data:          `{ ",": "value", "another": "entry" }`,
			expected:      "value",
			consensus:     "value",
			expectedError: "",
		},
		{
			query:         `$['*']`,
			data:          `{ "*": "value", "another": "entry" }`,
			expected:      "value",
			consensus:     "value",
			expectedError: "",
		},
		{
			query:         `$['*']`,
			data:          `{ "another": "entry" }`,
			expected:      nil,
			consensus:     nil,
			expectedError: "key: invalid token key '*' not found",
		},
		{
			query:         `$[ 'a' ]`,
			data:          `{" a": 1, "a": 2, " a ": 3, "a ": 4, " 'a' ": 5, " 'a": 6, "a' ": 7, " \"a\" ": 8, "\"a\"": 9}`,
			expected:      float64(2),
			consensus:     float64(2),
			expectedError: "",
		},
		{
			query:         `$['ni.*']`,
			data:          `{"nice": 42, "ni.*": 1, "mice": 100}`,
			expected:      float64(1),
			consensus:     float64(1),
			expectedError: "",
		},
		{
			query:         `$['two'.'some']`,
			data:          `{ "one": {"key": "value"}, "two": {"some": "more", "key": "other value"}, "two.some": "42", "two'.'some": "43" }`,
			expected:      nil,
			consensus:     nil,
			expectedError: "invalid JSONPath query '$['two'.'some']' invalid token. '['two'.'some']' does not match any token format",
		},
		{
			query:         `$[two.some]`,
			data:          `{ "one": {"key": "value"}, "two": {"some": "more", "key": "other value"}, "two.some": "42" }`,
			expected:      nil,
			consensus:     nil,
			expectedError: "invalid JSONPath query '$[two.some]' invalid token. '[two.some]' does not match any token format",
		},
		{
			query:         `$[*]`,
			data:          `[ "string", 42, { "key": "value" }, [0, 1] ]`,
			expected:      []interface{}{"string", float64(42), map[string]interface{}{"key": "value"}, []interface{}{float64(0), float64(1)}},
			consensus:     []interface{}{"string", float64(42), map[string]interface{}{"key": "value"}, []interface{}{float64(0), float64(1)}},
			expectedError: "",
		},
		{
			query:         `$[*]`,
			data:          `[]`,
			expected:      []interface{}{},
			consensus:     []interface{}{},
			expectedError: "",
		},
		{
			query:         `$[*]`,
			data:          `{}`,
			expected:      []interface{}{},
			consensus:     []interface{}{},
			expectedError: "",
		},
		{
			query:         `$[*]`,
			data:          `[ 40, null, 42 ]`,
			expected:      []interface{}{float64(40), nil, float64(42)},
			consensus:     []interface{}{float64(40), nil, float64(42)},
			expectedError: "",
		},
		{
			query:         `$[*]`,
			data:          `{ "some": "string", "int": 42, "object": { "key": "value" }, "array": [0, 1] }`,
			expected:      []interface{}{"string", float64(42), map[string]interface{}{"key": "value"}, []interface{}{float64(0), float64(1)}},
			consensus:     []interface{}{"string", float64(42), map[string]interface{}{"key": "value"}, []interface{}{float64(0), float64(1)}},
			expectedError: "",
		},
		{
			query:         `$[0:2][*]`,
			data:          `[[1, 2], ["a", "b"], [0, 0]]`,
			expected:      []interface{}{[]interface{}{float64(1), float64(2)}, []interface{}{"a", "b"}},
			consensus:     []interface{}{float64(1), float64(2), "a", "b"},
			expectedError: "",
		},
		{
			query:         `$[*].bar[*]`,
			data:          `[{"bar": [42]}]`,
			expected:      []interface{}{[]interface{}{float64(42)}},
			consensus:     []interface{}{float64(42)},
			expectedError: "",
		},
		{
			query:         `$..[*]`,
			data:          `{ "key": "value", "another key": { "complex": "string", "primitives": [0, 1] } }`,
			expected:      []interface{}{"value", map[string]interface{}{"complex": "string", "primitives": []interface{}{float64(0), float64(1)}}, []interface{}{float64(0), float64(1)}, "string", float64(0), float64(1)},
			consensus:     []interface{}{"value", map[string]interface{}{"complex": "string", "primitives": []interface{}{float64(0), float64(1)}}, []interface{}{float64(0), float64(1)}, "string", float64(0), float64(1)},
			expectedError: "",
		},
		{
			query:         `$[key]`,
			data:          `{ "key": "value" }`,
			expected:      nil,
			consensus:     nil,
			expectedError: "invalid JSONPath query '$[key]' invalid token. '[key]' does not match any token format",
		},
	}

	batchTest(t, tests)
	printConsensusMatrix(tests)
}
