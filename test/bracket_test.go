package test

import (
	"testing"
)

func Test_Bracket(t *testing.T) {
	batchTest(t, bracketTests)
}

var bracketTests []testData = []testData{
	{
		selector:      "$['key']",
		data:          `{"key": "value"}`,
		consensus:     "value",
		expected:      "value",
		expectedError: "",
	},
	{
		selector:      "$['missing']",
		data:          `{"key": "value"}`,
		consensus:     nil,
		expected:      nil,
		expectedError: "key: invalid token key 'missing' not found",
	},
	{
		selector: "$..[0]",
		data:     `[ "first", { "key": [ "first nested", { "more": [ { "nested": ["deepest", "second"] }, ["more", "values"] ] } ] } ]`,
		consensus: []interface{}{
			"deepest",
			"first nested",
			"first",
			"more",
			map[string]interface{}{
				"nested": []interface{}{
					"deepest",
					"second",
				},
			},
		},
		expected: []interface{}{
			"deepest",
			"first nested",
			"first",
			"more",
			map[string]interface{}{
				"nested": []interface{}{
					"deepest",
					"second",
				},
			},
		},
	},
	{
		selector:      "$['ü']",
		data:          `{"ü": 42}`,
		expected:      nil,
		consensus:     nil,
		expectedError: "key: invalid token key 'ü' not found",
	},
	{
		selector:      "$['two.some']",
		data:          `{ "one": {"key": "value"}, "two": {"some": "more", "key": "other value"}, "two.some": "42" }`,
		expected:      "42",
		consensus:     "42",
		expectedError: "",
	},
	{
		selector:      `$["key"]`,
		data:          `{"key": "value"}`,
		expected:      "value",
		consensus:     "value",
		expectedError: "",
	},
	{
		selector:      "$[]",
		data:          `{"": 42, "''": 123, "\"\"": 222}`,
		expected:      nil,
		consensus:     nil,
		expectedError: "invalid JSONPath selector '$[]' invalid token. '[]' does not match any token format",
	},
	{
		selector:      "$['']",
		data:          `{"": 42, "''": 123, "\"\"": 222}`,
		expected:      float64(42),
		consensus:     float64(42),
		expectedError: "",
	},
	{
		selector:      `$[""]`,
		data:          `{"": 42, "''": 123, "\"\"": 222}`,
		expected:      float64(42),
		consensus:     float64(42),
		expectedError: "",
	},
	{
		selector:      "$[-2]",
		data:          `["one element"]`,
		expected:      nil,
		consensus:     nil,
		expectedError: "index: invalid token out of range",
	},
	{
		selector:      "$[2]",
		data:          `["first", "second", "third", "forth", "fifth"]`,
		expected:      "third",
		consensus:     "third",
		expectedError: "",
	},
	{
		selector:      "$[0]",
		data:          `{ "0": "value" }`,
		expected:      nil,
		consensus:     nil,
		expectedError: "index: invalid token target. expected [array slice] got [map]",
	},
	{
		selector:      "$[1]",
		data:          `["one element"]`,
		expected:      nil,
		consensus:     nil,
		expectedError: "index: invalid token out of range",
	},
	{
		selector:      "$[0]",
		data:          `Hello World`,
		expected:      nil,
		consensus:     nil,
		expectedError: "invalid data. unexpected type or nil",
	},
	{
		selector:      "$.*[1]",
		data:          `[[1], [2,3]]`,
		expected:      []interface{}{float64(3)},
		consensus:     []interface{}{float64(3)},
		expectedError: "",
	},
	{
		selector:      "$[-1]",
		data:          `["first", "second", "third"]`,
		expected:      "third",
		consensus:     "third",
		expectedError: "",
	},
	{
		selector:      "$[-1]",
		data:          `[]`,
		expected:      nil,
		consensus:     nil,
		expectedError: "index: invalid token out of range",
	},
	{
		selector:      "$[0]",
		data:          `["first", "second", "third", "forth", "fifth"]`,
		expected:      "first",
		consensus:     "first",
		expectedError: "",
	},
	{
		selector:      "$[':']",
		data:          `{ ":": "value", "another": "entry" }`,
		expected:      "value",
		consensus:     "value",
		expectedError: "",
	},
	{
		selector:      "$[']']",
		data:          `{"]": 42}`,
		expected:      float64(42),
		consensus:     float64(42),
		expectedError: "",
	},
	{
		selector:      "$['@']",
		data:          `{ "@": "value", "another": "entry" }`,
		expected:      "value",
		consensus:     "value",
		expectedError: "",
	},
	{
		selector:      "$['.']",
		data:          `{ ".": "value", "another": "entry" }`,
		expected:      "value",
		consensus:     "value",
		expectedError: "",
	},
	{
		selector:      "$['.*']",
		data:          `{"key": 42, ".*": 1, "": 10}`,
		expected:      float64(1),
		consensus:     float64(1),
		expectedError: "",
	},
	{
		selector:      `$['"']`,
		data:          `{ "\"": "value", "another": "entry" }`,
		expected:      "value",
		consensus:     "value",
		expectedError: "",
	},
	{
		selector:      `$['\\']`,
		data:          `{"\\":"value"}`,
		expected:      "value",
		consensus:     consensusNone,
		expectedError: "",
	},
	{
		selector:      `$['\'']`,
		data:          `{"'":"value"}`,
		expected:      "value",
		consensus:     "value",
		expectedError: "",
	},
	{
		selector:      "$['0']",
		data:          `{ "0": "value" }`,
		expected:      "value",
		consensus:     "value",
		expectedError: "",
	},
	{
		selector:      "$['$']",
		data:          `{ "$": "value", "another": "entry" }`,
		expected:      "value",
		consensus:     "value",
		expectedError: "",
	},
	{
		selector:      `$[':@."$,*\'\\']`,
		data:          `{":@.\"$,*'\\": 42}`,
		expected:      float64(42),
		consensus:     consensusNone,
		expectedError: "",
	},
	{
		selector:      `$['single'quote']`,
		data:          `{"single'quote":"value"}`,
		expected:      nil,
		consensus:     nil,
		expectedError: "invalid JSONPath selector '$['single'quote']' invalid token. '['single'quote']' does not match any token format",
	},
	{
		selector:      `$[',']`,
		data:          `{ ",": "value", "another": "entry" }`,
		expected:      "value",
		consensus:     "value",
		expectedError: "",
	},
	{
		selector:      `$['*']`,
		data:          `{ "*": "value", "another": "entry" }`,
		expected:      "value",
		consensus:     "value",
		expectedError: "",
	},
	{
		selector:      `$['*']`,
		data:          `{ "another": "entry" }`,
		expected:      nil,
		consensus:     nil,
		expectedError: "key: invalid token key '*' not found",
	},
	{
		selector:      `$[ 'a' ]`,
		data:          `{" a": 1, "a": 2, " a ": 3, "a ": 4, " 'a' ": 5, " 'a": 6, "a' ": 7, " \"a\" ": 8, "\"a\"": 9}`,
		expected:      float64(2),
		consensus:     float64(2),
		expectedError: "",
	},
	{
		selector:      `$['ni.*']`,
		data:          `{"nice": 42, "ni.*": 1, "mice": 100}`,
		expected:      float64(1),
		consensus:     float64(1),
		expectedError: "",
	},
	{
		selector:      `$['two'.'some']`,
		data:          `{ "one": {"key": "value"}, "two": {"some": "more", "key": "other value"}, "two.some": "42", "two'.'some": "43" }`,
		expected:      nil,
		consensus:     nil,
		expectedError: "invalid JSONPath selector '$['two'.'some']' invalid token. '['two'.'some']' does not match any token format",
	},
	{
		selector:      `$[two.some]`,
		data:          `{ "one": {"key": "value"}, "two": {"some": "more", "key": "other value"}, "two.some": "42" }`,
		expected:      nil,
		consensus:     nil,
		expectedError: "invalid JSONPath selector '$[two.some]' invalid token. '[two.some]' does not match any token format",
	},
	{
		selector:      `$[*]`,
		data:          `[ "string", 42, { "key": "value" }, [0, 1] ]`,
		expected:      []interface{}{"string", float64(42), map[string]interface{}{"key": "value"}, []interface{}{float64(0), float64(1)}},
		consensus:     []interface{}{"string", float64(42), map[string]interface{}{"key": "value"}, []interface{}{float64(0), float64(1)}},
		expectedError: "",
	},
	{
		selector:      `$[*]`,
		data:          `[]`,
		expected:      []interface{}{},
		consensus:     []interface{}{},
		expectedError: "",
	},
	{
		selector:      `$[*]`,
		data:          `{}`,
		expected:      []interface{}{},
		consensus:     []interface{}{},
		expectedError: "",
	},
	{
		selector:      `$[*]`,
		data:          `[ 40, null, 42 ]`,
		expected:      []interface{}{float64(40), nil, float64(42)},
		consensus:     []interface{}{float64(40), nil, float64(42)},
		expectedError: "",
	},
	{
		selector:      `$[*]`,
		data:          `{ "some": "string", "int": 42, "object": { "key": "value" }, "array": [0, 1] }`,
		expected:      []interface{}{"string", float64(42), map[string]interface{}{"key": "value"}, []interface{}{float64(0), float64(1)}},
		consensus:     []interface{}{"string", float64(42), map[string]interface{}{"key": "value"}, []interface{}{float64(0), float64(1)}},
		expectedError: "",
	},
	{
		selector:      `$[0:2][*]`,
		data:          `[[1, 2], ["a", "b"], [0, 0]]`,
		expected:      []interface{}{[]interface{}{float64(1), float64(2)}, []interface{}{"a", "b"}},
		consensus:     []interface{}{float64(1), float64(2), "a", "b"},
		expectedError: "",
	},
	{
		selector:      `$[*].bar[*]`,
		data:          `[{"bar": [42]}]`,
		expected:      []interface{}{[]interface{}{float64(42)}},
		consensus:     []interface{}{float64(42)},
		expectedError: "",
	},
	{
		selector:      `$..[*]`,
		data:          `{ "key": "value", "another key": { "complex": "string", "primitives": [0, 1] } }`,
		expected:      []interface{}{"value", map[string]interface{}{"complex": "string", "primitives": []interface{}{float64(0), float64(1)}}, []interface{}{float64(0), float64(1)}, "string", float64(0), float64(1)},
		consensus:     []interface{}{"value", map[string]interface{}{"complex": "string", "primitives": []interface{}{float64(0), float64(1)}}, []interface{}{float64(0), float64(1)}, "string", float64(0), float64(1)},
		expectedError: "",
	},
	{
		selector:      `$[key]`,
		data:          `{ "key": "value" }`,
		expected:      nil,
		consensus:     nil,
		expectedError: "invalid JSONPath selector '$[key]' invalid token. '[key]' does not match any token format",
	},
}
